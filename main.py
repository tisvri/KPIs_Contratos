
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import numpy as np
from datetime import date
import graficos
import deltas
import altair as alt

from sqlalchemy import create_engine, text
from dotenv import load_dotenv
import bcrypt
import os


import pandas as pd
import datetime as dt
from datetime import datetime
from sqlalchemy.engine import URL
import plotly.express as px
import plotly.figure_factory as ff
from plotly import graph_objects as go
import numpy as np
import requests
import json
import psycopg2
# ---------- CONFIGURA√á√ïES ----------
load_dotenv()
st.set_page_config(page_title="Login Simples", layout="centered")
engine = create_engine(os.getenv("DB_URL"), pool_pre_ping=True)
secret_key = os.getenv("secret_key")  # pode usar futuramente para JWT ou session

# ---------- FUN√á√ïES ----------
def buscar_usuario_por_email(email):
    with engine.begin() as conn:
        row = conn.execute(
            text("SELECT id_usuario, nomeusuario, email, senha, funcao FROM usuarios_nap WHERE email = :e"),
            {"e": email.lower()}
        ).fetchone()
    return row

def validar_login(email, senha_digitada):
    usuario = buscar_usuario_por_email(email)
    if usuario and bcrypt.checkpw(senha_digitada.encode(), usuario.senha.encode()):
        st.session_state["usuario"] = {
            "id": usuario.id_usuario,
            "nomeusuario": usuario.nomeusuario,
            "email": usuario.email,
            "funcao": usuario.funcao
            }
        return True
    return False

def logout():
    st.session_state.pop("usuario", None)
    st.rerun()

# ---------- LOGIN ----------
if "usuario" not in st.session_state:
    st.title("üîê Login necess√°rio")

    with st.form("login_form"):
        email = st.text_input("E-mail")
        senha = st.text_input("Senha", type="password")
        submit = st.form_submit_button("Entrar")

    if submit:
        if validar_login(email, senha):
            st.success(f"Bem-vindo, {st.session_state['usuario']['nomeusuario']}!")
            st.rerun()
        else:
            st.error("E-mail ou senha inv√°lidos")

    st.stop()

# ---------- CONTE√öDO PROTEGIDO ----------

st.sidebar.write(f"üë§ {st.session_state['usuario']['nomeusuario']}")
if st.sidebar.button("Sair"):
    logout()

# TODO Configura√ß√£o da p√°gina
st.set_page_config(page_title="KPIs", layout="wide")

# TODO Carregamento de dados
df_modi = deltas.deltaContratos()
df_modificado = df_modi.copy()
#print(df_modificado)

#TODO FILTROS LATERAIS:
BaseDeDados = st.sidebar.radio("Selecione a base de dados",
                        ["Em andamento",
                        "Assinado",
                        "Geral",],
                        index=None)

protocolo_options = sorted(df_modificado['Protocolo'].unique())
protocoloFiltro = st.sidebar.multiselect("Selecione o Protocolo", options=protocolo_options)

centro_options = sorted(df_modificado['Centro coordenador'].unique())
CentroFiltro = st.sidebar.multiselect("Selecione o Centro", options=centro_options, key=68)

pi_options = sorted(df_modificado['Investigador PI'].unique())
PiFiltro = st.sidebar.multiselect("Selecione o PI", options=pi_options)

sponsor_options = sorted(df_modificado['Nome do patrocinador'].unique())
sponsorFiltro = st.sidebar.multiselect("Selecione o Sponsor", options=sponsor_options)

st.sidebar.write("---------------Contratos---------------")

status_opcoes = ["Geral", "Sem informa√ß√£o", "No prazo", "Alerta", "Urgente", "Atrasado"]
Delta1Filtro = st.sidebar.selectbox("Status delta 1", status_opcoes)

status_delta2 = ["Geral", "Sem informa√ß√£o", "No prazo", "Alerta", "Urgente"]
Delta2Filtro = st.sidebar.selectbox("Status delta 2", status_delta2)

status_delta3 = ["Geral", "Sem informa√ß√£o", "No prazo", "Alerta", "Urgente", "Atrasado"]
Delta3Filtro = st.sidebar.selectbox("Status delta 3", status_delta3)

status_delta4 = ["Geral", "Sem informa√ß√£o","Tempo bom", "Aten√ß√£o", "Atrasado"]
Delta4Filtro = st.sidebar.selectbox("Status delta 4", status_delta4)

st.sidebar.write("--------------Or√ßamentos--------------")

orcamentos_delta1 = ["Geral", "Sem informa√ß√£o", "No prazo", "Alerta", "Urgente", "Atrasado"]
orcamentos_Delta1Filtro = st.sidebar.selectbox("TEMPO AT√â RESPOSTA DO OR√áAMENTO", orcamentos_delta1)

orcamentos_delta2 = ["Geral", "Sem informa√ß√£o", "No prazo", "Alerta", "Urgente"]
orcamentos_Delta2Filtro = st.sidebar.selectbox("DECORRIDO DE RESPOSTA AT√â APROVADO EM OR√áAMENTO", ["Geral", "Sem informa√ß√£o", "No prazo", "Alerta", "Urgente"])

orcamentos_delta3 = ["Geral", "Sem informa√ß√£o", "Bom", "Aten√ß√£o", "Atrasado"]
orcamentos_Delta3Filtro = st.sidebar.selectbox("TEMPO NO OR√áAMENTO", orcamentos_delta3)

st.sidebar.write("--------------Regulat√≥rio--------------")

regulatorio_delta1 = ["Geral", "Sem informa√ß√£o", "No prazo", "Alerta", "Urgente"]
regulatorio_Delta1Filtro = st.sidebar.selectbox("Tempo no regulat√≥rio", regulatorio_delta1)

st.sidebar.write("--------------Geral--------------")

geral_ativacao = ["Geral", "Sem informa√ß√£o", "No prazo", "Alerta", "Urgente"]
geral_ativacaoFiltro = st.sidebar.selectbox("Tempo no regulat√≥rio", geral_ativacao, key=69)





#TODO: Deltas selecionados

if BaseDeDados == "Em andamento":
    df_modificado = df_modificado[~df_modificado['Status do contrato'].isin(['Assinado'])]
elif BaseDeDados == "Assinado":
    df_modificado = df_modificado[df_modificado['Status do contrato'].isin(['Assinado'])]



if Delta1Filtro != "Geral":
    df_modificado = df_modificado[df_modificado['Tempo ate a resposta'] == Delta1Filtro]

if Delta2Filtro != "Geral":
    df_modificado = df_modificado[df_modificado['at√© aprova√ß√£o'] == Delta2Filtro]

if Delta3Filtro != "Geral":
    df_modificado = df_modificado[df_modificado['Aprova√ß√£o at√© a assinatura'] == Delta3Filtro]

if Delta4Filtro != "Geral":
    df_modificado = df_modificado[df_modificado['At√© a assinatura'] == Delta4Filtro]

if PiFiltro:
        df_modificado = df_modificado[df_modificado['Investigador PI'].isin(PiFiltro)]

if sponsorFiltro:
    df_modificado = df_modificado[df_modificado['Nome do patrocinador'].isin(sponsorFiltro)]

#Or√ßamentos
if orcamentos_Delta1Filtro != "Geral":
    df_modificado = df_modificado[df_modificado['resposta do or√ßamento'] == orcamentos_Delta1Filtro]

if orcamentos_Delta2Filtro != "Geral":
    df_modificado = df_modificado[df_modificado['resposta at√© aprovado em or√ßamento'] == orcamentos_Delta2Filtro]

if orcamentos_Delta3Filtro != "Geral":
    df_modificado = df_modificado[df_modificado['Tempo geral no or√ßamento'] == orcamentos_Delta3Filtro]

#Regulatorio
if regulatorio_Delta1Filtro != "Geral":
    df_modificado = df_modificado[df_modificado['Tempo regulat√≥rio'] == regulatorio_Delta1Filtro]

#Geral 
if geral_ativacaoFiltro != "Geral":
    df_modificado = df_modificado[df_modificado['ativa√ß√£o do centro ap√≥s todo o fluxo'] == geral_ativacaoFiltro]

if CentroFiltro:
        df_modificado = df_modificado[df_modificado['Centro coordenador'].isin(CentroFiltro)]

if protocoloFiltro:
        df_modificado = df_modificado[df_modificado['Protocolo'].isin(protocoloFiltro)]

#TODO: Abas
CONTRATOS, ORCAMENTOS, REGULATORIO, GERAL = st.tabs(["**CONTRATOS**", "**OR√áAMENTOS**", "**REGULAT√ìRIO**", "**GERAL**"])

    
# TODO: Aba Contratos
with CONTRATOS:

    #TODO: Delta 1
    with st.expander("Delta 1"):
        st.markdown("O delta 1 consiste no tempo decorido da data de recebimento do contrato ate o tempo de resposta:<br>< 5 dias No prazo<br>5 - 9 dias Alerta<br>10 - 14 dias Urgente<br>15+ dias Atrasado", unsafe_allow_html=True)

    graf1, graf2 = st.columns(2)
    with graf1:
        contagem = df_modificado['Tempo ate a resposta'].value_counts().reindex(status_opcoes[1:], fill_value=0)
        st.plotly_chart(graficos.grafico_barras(contagem, "Classifica√ß√£o do tempo at√© resposta", ["gray", "green", "orange", "red", "lightblue"]), use_container_width=True, key="1")
    with graf2:
        #       st.plotly_chart(graficos.grafico_horizontal_por_coluna(df_modificado,'Investigador PI', 'Contratos por Investigador PI'), use_container_width=True, key="2")

        # Agrupamento e contagem
        df_grouped = df_modificado.groupby(['Tempo ate a resposta', 'Investigador PI']).size().reset_index(name='Quantidade')

        # Renomeia colunas para facilitar o uso no Streamlit
        df_grouped = df_grouped.rename(columns={
            'Investigador PI': 'Investigador',
            'Tempo ate a resposta': 'status'
        })

        cores_personalizadas = {
            "Sem informa√ß√£o": "gray",
            "No prazo": "green",
            "Alerta": "orange",
            "Urgente": "red",
            "Atrasado": "lightblue"
        }
        
        # Gr√°fico com Altair (barras horizontais)
        chart = alt.Chart(df_grouped).mark_bar().encode(
            y=alt.Y('Investigador:N', sort='-x', axis=alt.Axis(grid=False, domain=False)),
            x=alt.X('Quantidade:Q', axis=alt.Axis(grid=False, domain=False)),
            #color='status:N',
            color=alt.Color('status:N', scale=alt.Scale(domain=list(cores_personalizadas.keys()), range=list(cores_personalizadas.values()))),

            tooltip=['Investigador', 'status', 'Quantidade']
        ).properties(
            width='container',
            height=500
        )

        st.altair_chart(chart, use_container_width=True, key="60")

    #TODO: Delta 2
    with st.expander("Delta 2"):
        st.markdown("O delta 2 consiste no tempo decorido da resposta do contrato at√© a data de aprova√ß√£o:<br>< 15 dias No prazo<br>15 - 29 dias Alerta<br>30+ dias Urgente", unsafe_allow_html=True)

    graf3, graf4 = st.columns(2)
    with graf3:
        contagem = df_modificado['at√© aprova√ß√£o'].value_counts().reindex(["Sem informa√ß√£o", "No prazo", "Alerta", "Urgente"], fill_value=0)
        st.plotly_chart(graficos.grafico_barras(contagem, "Classifica√ß√£o do tempo at√© aprova√ß√£o", ["gray", "green", "orange", "red"]), use_container_width=True, key="3")
    with graf4:
        st.plotly_chart(graficos.grafico_horizontal_por_coluna(df_modificado,'Nome do patrocinador', 'Contratos por Sponsor'), use_container_width=True, key="4")

    #TODO: Delta 3
    with st.expander("Delta 3"):
        st.markdown("O delta 3 consistem na data de aprova√ß√£o at√© a data de assinatura:<br>< 5 dias No prazo<br>5 - 9 dias Alerta<br>10 - 14 dias Urgente<br>15+ dias Atrasado", unsafe_allow_html=True)

    graf5, graf6 = st.columns(2)
    with graf5:
        contagem = df_modificado['Aprova√ß√£o at√© a assinatura'].value_counts().reindex(status_delta3[1:], fill_value=0)
        st.plotly_chart(graficos.grafico_barras(contagem, "Classifica√ß√£o do tempo da aprova√ß√£o at√© a assinatura", ["gray", "green", "orange", "red", "lightblue"]), use_container_width=True, key="5")
    with graf6:
        st.plotly_chart(graficos.delta3(df_modificado), use_container_width=True, key="6")


    #TODO: Delta 4
    with st.expander("Delta 4"):
        st.markdown("O delta 4 consiste no tempo que demorou ate a assinatura:<br><= 24 dias: Tempo Bom<br>25 - 59 dias: Aten√ß√£o<br>60+ dias Atrasado", unsafe_allow_html=True)

    graf7, graf8 = st.columns(2)
    with graf7:
        contagem = df_modificado['At√© a assinatura'].value_counts().reindex(["Sem informa√ß√£o","Tempo bom", "Aten√ß√£o", "Atrasado"], fill_value=0)
        st.plotly_chart(graficos.grafico_barras(contagem, "Classifica√ß√£o do tempo at√© a assinatura", ["gray","green", "orange", "red"]), use_container_width=True, key="7")
    with graf8:
        # Agrupamento e contagem
        df_grouped = df_modificado.groupby(['Status do contrato', 'At√© a assinatura']).size().reset_index(name='Quantidade')

        # Renomeia colunas para facilitar o uso no Streamlit
        df_grouped = df_grouped.rename(columns={
            'Status do contrato': 'Status',
            'At√© a assinatura': 'At√© a assinatura'
        })

        cores_personalizadas = {
            "Sem informa√ß√£o": "gray",
            "Tempo bom": "green",
            "Aten√ß√£o": "orange",
            "Atrasado": "red"
        }

        # Gr√°fico de barras horizontais com Altair
        chart = alt.Chart(df_grouped).mark_bar().encode(
            y=alt.Y('Status:N', sort='-x', axis=alt.Axis(grid=False, domain=False), title='Status do Contrato'),
            x=alt.X('Quantidade:Q', axis=alt.Axis(grid=False, domain=False), title='Quantidade'),
            #color=alt.Color('At√© a assinatura:N', title='At√© a assinatura'),
            color=alt.Color('At√© a assinatura:N', title='At√© a assinatura', scale=alt.Scale(domain=list(cores_personalizadas.keys()), range=list(cores_personalizadas.values()))),
            tooltip=['At√© a assinatura', 'Quantidade']
        ).properties(
            width='container',
            height=500,
            title='Quantidade por Status do Contrato e at√© a assinatura'
        )

        # Exibe o gr√°fico no Streamlit
        st.altair_chart(chart, use_container_width=True, key="8")

    #TODO: SLA

    sla1, sla2, sla3, sla4 = st.columns(4)
    with sla1:
        # Dados de contagem
        contagem = df_modificado['Tempo ate a resposta'].value_counts().reindex(status_opcoes[1:], fill_value=0)

        # Exibe o gr√°fico no Streamlit
        st.plotly_chart(
            graficos.grafico_pizza(contagem, "Tempo at√© resposta", 
                        ["gray", "green", "orange", "red", "lightblue"]),
            use_container_width=True
        )

    with sla2:
        # Dados de contagem
        contagem = df_modificado['at√© aprova√ß√£o'].value_counts().reindex(status_opcoes[1:], fill_value=0)

        # Exibe o gr√°fico no Streamlit
        st.plotly_chart(
            graficos.grafico_pizza(contagem, "Tempo at√© aprova√ß√£o", 
                        ["gray", "green", "orange", "red", "lightblue"]),
            use_container_width=True
        )

    with sla3:
        # Dados de contagem
        contagem = df_modificado['Aprova√ß√£o at√© a assinatura'].value_counts().reindex(status_opcoes[1:], fill_value=0)

        # Exibe o gr√°fico no Streamlit
        st.plotly_chart(
            graficos.grafico_pizza(contagem, "Tempo da aprova√ß√£o at√© a assinatura", 
                        ["gray", "green", "orange", "red", "lightblue"]),
            use_container_width=True
        )
    with sla4:
        # Dados de contagem
        contagem = df_modificado['At√© a assinatura'].value_counts().reindex(["Sem informa√ß√£o","Tempo bom", "Aten√ß√£o", "Atrasado"], fill_value=0)

        # Exibe o gr√°fico no Streamlit
        st.plotly_chart(
            graficos.grafico_pizza(contagem, "Tempo at√© a assinatura", 
                        [ "gray", "green","orange", "red", "lightblue"]),
            use_container_width=True
        )

    #TODO: tabela
    st.subheader("Tabela Geral")
    colunas_disponiveis = [col for col in [
        "Protocolo", "Centro coordenador", "Nome do patrocinador", "Investigador PI",
        "Status do contrato", "Tempo ate a resposta",
        "at√© aprova√ß√£o", "Aprova√ß√£o at√© a assinatura","At√© a assinatura", "Obseva√ß√µes do contrato"
    ] if col in df_modificado.columns]

    colunas_selecionadas = st.multiselect("Selecione as colunas para visualizar:", colunas_disponiveis, default=colunas_disponiveis)
    st.dataframe(df_modificado[colunas_selecionadas])

#TODO Aba Orcamentos
with ORCAMENTOS:
    #TODO: Delta 1
    with st.expander("Delta 1"):
        st.markdown("O delta 1 consiste no tempo decorido do cadastro do or√ßamento at√© resposta:<br>< 5 dias: No prazo<br>5 - 9 dias: Alerta<br> 10 - 14 dias: Urgente<br>15+ dias: Atrasado", unsafe_allow_html=True)
        

    orca1, orca2 = st.columns(2)
    with orca1:
        contagem = df_modificado['resposta do or√ßamento'].value_counts().reindex(["Sem informa√ß√£o","No prazo","Alerta", "Urgente", "Atrasado"], fill_value=0)
        st.plotly_chart(graficos.grafico_barras(contagem, "Classifica√ß√£o do cadastro do or√ßamento at√© resposta", ["gray", "green", "orange", "red", "lightblue"]), use_container_width=True, key="9")
    with orca2:        
        df_grouped = df_modificado.groupby(['resposta do or√ßamento', 'Centro coordenador']).size().reset_index(name='Quantidade')

        # Renomeia colunas para facilitar o uso no Streamlit
        df_grouped = df_grouped.rename(columns={
            'Centro coordenador': 'Centro',
            'resposta do or√ßamento': 'status'
        })

        cores_personalizadas = {
            "Sem informa√ß√£o": "gray",
            "No prazo": "green",
            "Alerta": "orange",
            "Urgente": "red",
            "Atrasado": "lightblue"
        }
        
        # Gr√°fico com Altair (barras horizontais)
        chart = alt.Chart(df_grouped).mark_bar().encode(
            y=alt.Y('Centro:N', sort='-x', axis=alt.Axis(grid=False, domain=False)),
            x=alt.X('Quantidade:Q', axis=alt.Axis(grid=False, domain=False)),
            #color='status:N',
            color=alt.Color('status:N', scale=alt.Scale(domain=list(cores_personalizadas.keys()), range=list(cores_personalizadas.values()))),

            tooltip=['Centro', 'status', 'Quantidade']
        ).properties(
            width='container',
            height=500
        )

        st.altair_chart(chart, use_container_width=True, key="61")

    with st.expander("Delta 2"):
        st.markdown("O delta 2 e o tempo decorrido da resposta at√© a data de aprova√ß√£o dos or√ßamentos :<br>< 15 dias: No prazo<br>15 - 29 dias: Alerta<br>30+ dias: Urgente", unsafe_allow_html=True)
    orca3, orca4 = st.columns(2)
    with orca3:
        contagem = df_modificado['resposta at√© aprovado em or√ßamento'].value_counts().reindex(["Sem informa√ß√£o","No prazo", "Alerta", "Urgente"], fill_value=0)
        st.plotly_chart(graficos.grafico_barras(contagem, "Classifica√ß√£o da resposta at√© a data de aprova√ß√£o", ["gray", "green", "orange", "red", "lightblue"]), use_container_width=True, key="11")
    with orca4:
        #st.plotly_chart(graficos.grafico_horizontal_por_coluna(df_modificado,'Nome do patrocinador', 'Sponsor'), use_container_width=True, key="12")
        df_grouped = df_modificado.groupby(['resposta at√© aprovado em or√ßamento', 'Nome do patrocinador']).size().reset_index(name='Quantidade')

        # Renomeia colunas para facilitar o uso no Streamlit
        df_grouped = df_grouped.rename(columns={
            'Nome do patrocinador': 'Nome do patrocinador',
            'resposta at√© aprovado em or√ßamento': 'status'
        })

        cores_personalizadas = {
            "Sem informa√ß√£o": "gray",
            "No prazo": "green",
            "Alerta": "orange",
            "Urgente": "red"}
        
        # Gr√°fico com Altair (barras horizontais)
        chart = alt.Chart(df_grouped).mark_bar().encode(
            y=alt.Y('Nome do patrocinador:N', sort='-x', axis=alt.Axis(grid=False, domain=False)),
            x=alt.X('Quantidade:Q', axis=alt.Axis(grid=False, domain=False)),
            #color='status:N',
            color=alt.Color('status:N', scale=alt.Scale(domain=list(cores_personalizadas.keys()), range=list(cores_personalizadas.values()))),

            tooltip=['Nome do patrocinador', 'status', 'Quantidade']
        ).properties(
            width='container',
            height=500
        )

        st.altair_chart(chart, use_container_width=True, key="62")


    with st.expander("Delta 3"):
        st.markdown("O delta 3 e o tempo geral no or√ßamento:<br>< 19 dias: Bom<br>20 - 44 dias: Aten√ß√£o<br>45+ dias: Atrasado", unsafe_allow_html=True)
    orca5, orca6 = st.columns(2)
    with orca5:
        contagem = df_modificado['Tempo geral no or√ßamento'].value_counts().reindex(["Sem informa√ß√£o","Tempo bom", "Aten√ß√£o", "Atrasado"], fill_value=0)
        st.plotly_chart(graficos.grafico_barras(contagem, "Classifica√ß√£o tempo geral no or√ßamento", ["gray", "green", "orange", "red", "lightblue"]), use_container_width=True, key="13")
    with orca6:        
        # Agrupamento e contagem
        df_grouped = df_modificado.groupby(['Status do orcamento', 'Tempo geral no or√ßamento']).size().reset_index(name='Quantidade')

        # Renomeia colunas para facilitar o uso no Streamlit
        df_grouped = df_grouped.rename(columns={
            'Status do orcamento': 'Status',
            'Tempo geral no or√ßamento': 'Tempo geral no or√ßamento'
        })

        cores_personalizadas = {
            "Sem informa√ß√£o": "gray",
            "Tempo bom": "green",
            "Aten√ß√£o": "orange",
            "Atrasado": "red"
        }

        # Gr√°fico de barras horizontais com Altair
        chart = alt.Chart(df_grouped).mark_bar().encode(
            y=alt.Y('Status:N', sort='-x', axis=alt.Axis(grid=False, domain=False), title='Status do orcamento'),
            x=alt.X('Quantidade:Q', axis=alt.Axis(grid=False, domain=False), title='Quantidade'),
            color=alt.Color('Tempo geral no or√ßamento:N', title='Tempo geral no or√ßamento', scale=alt.Scale(domain=list(cores_personalizadas.keys()), range=list(cores_personalizadas.values()))),
            tooltip=['Tempo geral no or√ßamento', 'Quantidade']
        ).properties(
            width='container',
            height=500,
            title='Status'
        )

        # Exibe o gr√°fico no Streamlit
        st.altair_chart(chart, use_container_width=True, key="8")

    
    sla1, sla2, sla3 = st.columns(3)
    with sla1:
        # Dados de contagem
        contagem = df_modificado['resposta do or√ßamento'].value_counts().reindex(status_opcoes[1:], fill_value=0)

        # Exibe o gr√°fico no Streamlit
        st.plotly_chart(
            graficos.grafico_pizza(contagem, "Tempo decorido do cadastro do or√ßamento at√© resposta", 
                        ["gray", "green", "orange", "red", "lightblue"]),
            use_container_width=True , key="15"
        )
    with sla2:
        # Dados de contagem
        contagem = df_modificado['resposta at√© aprovado em or√ßamento'].value_counts().reindex(status_opcoes[1:], fill_value=0)

        # Exibe o gr√°fico no Streamlit
        st.plotly_chart(
            graficos.grafico_pizza(contagem, "Tempo decorrido da resposta at√© a data de aprova√ß√£o", 
                        ["gray", "green", "orange", "red", "lightblue"]),
            use_container_width=True, key="16"
        )
    with sla3:
        # Dados de contagem
        contagem = df_modificado['Tempo geral no or√ßamento'].value_counts().reindex(["Sem informa√ß√£o","Tempo bom", "Aten√ß√£o", "Atrasado"], fill_value=0)

        # Exibe o gr√°fico no Streamlit
        st.plotly_chart(
            graficos.grafico_pizza(contagem, "Tempo geral no or√ßamento", 
                        ["gray", "green", "orange", "red"]),
            use_container_width=True, key="17"
        )

    
    st.subheader("Tabela Geral")
    colunas_disponiveis = [col for col in [
        "Protocolo", "Centro coordenador", "Nome do patrocinador", "Investigador PI",
        "Status do orcamento", "resposta do or√ßamento",
        "resposta at√© aprovado em or√ßamento", "Tempo geral no or√ßamento", "Obseva√ß√µes do or√ßamento"
    ] if col in df_modificado.columns]

    colunas_selecionadas = st.multiselect("Selecione as colunas para visualizar:", colunas_disponiveis, default=colunas_disponiveis)
    st.dataframe(df_modificado[colunas_selecionadas])

#TODO Aba regulatorio
with REGULATORIO:
    with st.expander("Delta"):
        st.markdown("Tempo decorido no processo do regulat√≥rio:<br>< 15 dias: No prazo<br>15 - 29 dias: Alerta<br>30+ dias: Urgente", unsafe_allow_html=True)

    regul1, regul2 = st.columns(2)
    with regul1:
        contagem = df_modificado['Tempo regulat√≥rio'].value_counts().reindex(["Sem informa√ß√£o","No prazo", "Alerta", "Urgente"], fill_value=0)
        st.plotly_chart(graficos.grafico_barras(contagem, "Classifica√ß√£o do processo do regulat√≥rio:", ["gray", "green", "orange", "red", "lightblue"]), use_container_width=True, key="18")
    with regul2:
        df_grouped = df_modificado.groupby(['Tempo regulat√≥rio', 'Centro coordenador']).size().reset_index(name='Quantidade')

        # Renomeia colunas para facilitar o uso no Streamlit
        df_grouped = df_grouped.rename(columns={
            'Centro coordenador': 'Centro',
            'Tempo regulat√≥rio': 'status'
        })

        cores_personalizadas = {
            "Sem informa√ß√£o": "gray",
            "No prazo": "green",
            "Alerta": "orange",
            "Urgente": "red"
        }
        
        # Gr√°fico com Altair (barras horizontais)
        chart = alt.Chart(df_grouped).mark_bar().encode(
            y=alt.Y('Centro:N', sort='-x', axis=alt.Axis(grid=False, domain=False)),
            x=alt.X('Quantidade:Q', axis=alt.Axis(grid=False, domain=False), title='Quantidade'),
            #color='status:N',
            color=alt.Color('status:N', scale=alt.Scale(domain=list(cores_personalizadas.keys()), range=list(cores_personalizadas.values()))),

            tooltip=['Centro', 'status', 'Quantidade']
        ).properties(
            width='container',
            height=500
        )

        st.altair_chart(chart, use_container_width=True, key="19")

    # Dados de contagem
    contagem = df_modificado['Tempo regulat√≥rio'].value_counts().reindex(status_opcoes[1:], fill_value=0)

    # Exibe o gr√°fico no Streamlit
    st.plotly_chart(
        graficos.grafico_pizza(contagem, "Distribui√ß√£o do status no regulatorio", 
                    ["gray", "green", "orange", "red", "lightblue"]),
        use_container_width=True, key="20"
    )    

    st.subheader("Tabela Geral")
    colunas_disponiveis = [col for col in [
        "Protocolo", "Centro coordenador", "Nome do patrocinador", "Investigador PI",
        "Status do regulat√≥rio", "Tempo regulat√≥rio", "Obseva√ß√µes do regulat√≥rio"
    ] if col in df_modificado.columns]

    colunas_selecionadas = st.multiselect("Selecione as colunas para visualizar:", colunas_disponiveis, default=colunas_disponiveis)
    st.dataframe(df_modificado[colunas_selecionadas])

#TODO Aba geral
with GERAL:
    with st.expander("Geral"):
        st.markdown("Tempo at√© a ativa√ß√£o do centro:<br>< 15 dias: No prazo<br>15 - 29 dias: Alerta<br>30+ dias: Urgente", unsafe_allow_html=True)
    
    geral1, geral2 = st.columns(2)
    with geral1:
        contagem = df_modificado['ativa√ß√£o do centro ap√≥s todo o fluxo'].value_counts().reindex(["Sem informa√ß√£o","No prazo", "Alerta", "Urgente"], fill_value=0)
        st.plotly_chart(graficos.grafico_barras(contagem, "Classifica√ß√£o ativa√ß√£o de centro", ["gray", "green", "orange", "red", "lightblue"]), use_container_width=True, key="21")
    with geral2:
        df_grouped = df_modificado.groupby(['ativa√ß√£o do centro ap√≥s todo o fluxo', 'Centro coordenador']).size().reset_index(name='Quantidade')

        # Renomeia colunas para facilitar o uso no Streamlit
        df_grouped = df_grouped.rename(columns={
            'Centro coordenador': 'Centro',
            'ativa√ß√£o do centro ap√≥s todo o fluxo': 'status'
        })

        cores_personalizadas = {
            "Sem informa√ß√£o": "gray",
            "No prazo": "green",
            "Alerta": "orange",
            "Urgente": "red",
            "Atrasado": "lightblue"
        }
        
        # Gr√°fico com Altair (barras horizontais)
        chart = alt.Chart(df_grouped).mark_bar().encode(
            y=alt.Y('Centro:N', sort='-x', axis=alt.Axis(grid=False, domain=False)),
            x=alt.X('Quantidade:Q', axis=alt.Axis(grid=False, domain=False)),
            #color='status:N',
            color=alt.Color('status:N', scale=alt.Scale(domain=list(cores_personalizadas.keys()), range=list(cores_personalizadas.values()))),

            tooltip=['status', 'Quantidade']
        ).properties(
            width='container',
            height=500
        )

        st.altair_chart(chart, use_container_width=True, key="61")

     # Dados de contagem
    # contagem = df_modificado['ativa√ß√£o do centro ap√≥s todo o fluxo'].value_counts().reindex(status_opcoes[1:], fill_value=0)
    # # Exibe o gr√°fico no Streamlit
    # st.plotly_chart(
    #     graficos.grafico_pizza(contagem, "status geral", 
    #             ["gray", "green", "orange", "red", "lightblue"]),
    #     use_container_width=True , key="22"
    # )

    geral3, geral4 = st.columns(2)
    with geral3:
        contagem = df_modificado['Status'].value_counts()
        st.plotly_chart(graficos.grafico_barras(contagem, 'Status Geral', ["gray", "green", "orange", "red", "lightblue"] ), use_container_width=True, key="65")

    with geral4:
        st.plotly_chart(graficos.statusgeral(df_modificado), use_container_width=True, key="status")



    st.subheader("Tabela Geral")
    colunas_disponiveis = [col for col in [
        "Protocolo", "Centro coordenador", "Nome do patrocinador", "Investigador PI", "Dados da CRO respons√°vel", "Status", "Contato na CRO", "Data de cadastro",
        "Data do recebimento do contrato", "Data da resposta do contrato", "Data da aprova√ß√£o do contrato", "Data da assinatura do contrato", "Tempo ate a resposta", "at√© aprova√ß√£o", "Aprova√ß√£o at√© a assinatura","At√© a assinatura", "Status do contrato", "Obseva√ß√µes do contrato", 
        "Data do recebimento do or√ßamento", "Data da resposta do or√ßamento", "Data da aprova√ß√£o do or√ßamento","resposta do or√ßamento","resposta at√© aprovado em or√ßamento", "Tempo geral no or√ßamento", "Status do orcamento", "Obseva√ß√µes do or√ßamento", 
        "Data de submiss√£o regulat√≥ria", "Data de aprova√ß√£o regulat√≥ria", "Tempo regulat√≥rio", "Status do regulat√≥rio", "Obseva√ß√µes do regulat√≥rio",
        "Data de ativa√ß√£o do centro", "Tempo at√© ativa√ß√£o do centro ap√≥s todo o fluxo"


    ] if col in df_modificado.columns]

    colunas_selecionadas = st.multiselect("Selecione as colunas para visualizar:", colunas_disponiveis, default=colunas_disponiveis)
    st.dataframe(df_modificado[colunas_selecionadas])